// Create a program to collect and store all the cards to assist the users in finding all the cards in a given symbol using Collection interface.

import java.util.*;

// Class to represent a Card
class Card {
    private String symbol;
    private String name;
    
    public Card(String symbol, String name) {
        this.symbol = symbol;
        this.name = name;
    }
    
    public String getSymbol() {
        return symbol;
    }
    
    public String getName() {
        return name;
    }
    
    @Override
    public String toString() {
        return "Card{" + "symbol='" + symbol + '\'' + ", name='" + name + "'}";
    }
}

// Class to manage card collection
class CardCollection {
    private Collection<Card> cards;
    
    public CardCollection() {
        this.cards = new ArrayList<>();
    }
    
    // Method to add a card to the collection
    public void addCard(Card card) {
        cards.add(card);
    }
    
    // Method to find all cards with a given symbol
    public List<Card> findCardsBySymbol(String symbol) {
        List<Card> result = new ArrayList<>();
        for (Card card : cards) {
            if (card.getSymbol().equalsIgnoreCase(symbol)) {
                result.add(card);
            }
        }
        return result;
    }
    
    // Method to display all cards
    public void displayCards() {
        for (Card card : cards) {
            System.out.println(card);
        }
    }
}

// Main class to test the functionality
public class CardCollectorApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CardCollection collection = new CardCollection();
        
        // Adding some sample cards
        collection.addCard(new Card("Heart", "Ace"));
        collection.addCard(new Card("Spade", "King"));
        collection.addCard(new Card("Diamond", "Queen"));
        collection.addCard(new Card("Heart", "Ten"));
        
        System.out.print("Enter a symbol to search for cards: ");
        String symbol = scanner.nextLine();
        
        List<Card> foundCards = collection.findCardsBySymbol(symbol);
        
        if (foundCards.isEmpty()) {
            System.out.println("No cards found for symbol: " + symbol);
        } else {
            System.out.println("Cards found: ");
            for (Card card : foundCards) {
                System.out.println(card);
            }
        }
        
        scanner.close();
    }
}

// code 2 .Develop a ticket booking system with synchronized threads to ensure no double booking of seats. Use thread priorities to simulate VIP bookings being processed first.

import java.util.*;

class TicketBookingSystem {
    private final int totalSeats;
    private final boolean[] seats;

    public TicketBookingSystem(int totalSeats) {
        this.totalSeats = totalSeats;
        this.seats = new boolean[totalSeats];
    }

    public synchronized boolean bookSeat(int seatNumber, String customerType) {
        if (seatNumber < 0 || seatNumber >= totalSeats) {
            System.out.println(customerType + " - Invalid seat number: " + seatNumber);
            return false;
        }
        if (!seats[seatNumber]) {
            seats[seatNumber] = true;
            System.out.println(customerType + " booked seat " + seatNumber);
            return true;
        } else {
            System.out.println(customerType + " - Seat " + seatNumber + " is already booked.");
            return false;
        }
    }
}

class Customer extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final int seatNumber;
    private final String customerType;

    public Customer(TicketBookingSystem bookingSystem, int seatNumber, String customerType, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerType = customerType;
        setPriority(priority);
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerType);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem system = new TicketBookingSystem(10);
        
        Thread vip1 = new Customer(system, 3, "VIP Customer 1", Thread.MAX_PRIORITY);
        Thread vip2 = new Customer(system, 5, "VIP Customer 2", Thread.MAX_PRIORITY);
        Thread regular1 = new Customer(system, 3, "Regular Customer 1", Thread.NORM_PRIORITY);
        Thread regular2 = new Customer(system, 5, "Regular Customer 2", Thread.NORM_PRIORITY);
        Thread regular3 = new Customer(system, 7, "Regular Customer 3", Thread.NORM_PRIORITY);
        
        vip1.start();
        vip2.start();
        regular1.start();
        regular2.start();
        regular3.start();
    }
}
